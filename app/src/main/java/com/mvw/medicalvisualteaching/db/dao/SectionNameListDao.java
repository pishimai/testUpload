package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.SectionNameList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NameList".
*/
public class SectionNameListDao extends AbstractDao<SectionNameList, Void> {

    public static final String TABLENAME = "NameList";

    /**
     * Properties of entity SectionNameList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property College = new Property(1, String.class, "college", false, "college");
        public final static Property Kind = new Property(2, String.class, "kind", false, "kind");
        public final static Property Name = new Property(3, String.class, "name", false, "name");
        public final static Property Order = new Property(4, String.class, "order", false, "f_order");
        public final static Property Acknowledgements_id = new Property(5, String.class, "acknowledgements_id", false, "acknowledgements_id");
    }


    public SectionNameListDao(DaoConfig config) {
        super(config);
    }
    
    public SectionNameListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SectionNameList entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String college = entity.getCollege();
        if (college != null) {
            stmt.bindString(2, college);
        }
 
        String kind = entity.getKind();
        if (kind != null) {
            stmt.bindString(3, kind);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String order = entity.getOrder();
        if (order != null) {
            stmt.bindString(5, order);
        }
 
        String acknowledgements_id = entity.getAcknowledgements_id();
        if (acknowledgements_id != null) {
            stmt.bindString(6, acknowledgements_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SectionNameList entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String college = entity.getCollege();
        if (college != null) {
            stmt.bindString(2, college);
        }
 
        String kind = entity.getKind();
        if (kind != null) {
            stmt.bindString(3, kind);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String order = entity.getOrder();
        if (order != null) {
            stmt.bindString(5, order);
        }
 
        String acknowledgements_id = entity.getAcknowledgements_id();
        if (acknowledgements_id != null) {
            stmt.bindString(6, acknowledgements_id);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SectionNameList readEntity(Cursor cursor, int offset) {
        SectionNameList entity = new SectionNameList( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // college
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // kind
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // order
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // acknowledgements_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SectionNameList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCollege(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKind(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrder(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAcknowledgements_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SectionNameList entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SectionNameList entity) {
        return null;
    }

    @Override
    public boolean hasKey(SectionNameList entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
