package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.SectionCasesItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CasesItem".
*/
public class SectionCasesItemDao extends AbstractDao<SectionCasesItem, String> {

    public static final String TABLENAME = "CasesItem";

    /**
     * Properties of entity SectionCasesItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property F_order = new Property(1, String.class, "f_order", false, "f_order");
        public final static Property ParagraphId = new Property(2, String.class, "paragraphId", false, "paragraphId");
        public final static Property Text = new Property(3, String.class, "text", false, "text");
        public final static Property Title = new Property(4, String.class, "title", false, "title");
        public final static Property Cases_id = new Property(5, String.class, "cases_id", false, "cases_id");
        public final static Property Parent_id = new Property(6, String.class, "parent_id", false, "parent_id");
    }


    public SectionCasesItemDao(DaoConfig config) {
        super(config);
    }
    
    public SectionCasesItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SectionCasesItem entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String f_order = entity.getF_order();
        if (f_order != null) {
            stmt.bindString(2, f_order);
        }
 
        String paragraphId = entity.getParagraphId();
        if (paragraphId != null) {
            stmt.bindString(3, paragraphId);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String cases_id = entity.getCases_id();
        if (cases_id != null) {
            stmt.bindString(6, cases_id);
        }
 
        String parent_id = entity.getParent_id();
        if (parent_id != null) {
            stmt.bindString(7, parent_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SectionCasesItem entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String f_order = entity.getF_order();
        if (f_order != null) {
            stmt.bindString(2, f_order);
        }
 
        String paragraphId = entity.getParagraphId();
        if (paragraphId != null) {
            stmt.bindString(3, paragraphId);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String cases_id = entity.getCases_id();
        if (cases_id != null) {
            stmt.bindString(6, cases_id);
        }
 
        String parent_id = entity.getParent_id();
        if (parent_id != null) {
            stmt.bindString(7, parent_id);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SectionCasesItem readEntity(Cursor cursor, int offset) {
        SectionCasesItem entity = new SectionCasesItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // f_order
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // paragraphId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // text
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cases_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // parent_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SectionCasesItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setF_order(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParagraphId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCases_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setParent_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SectionCasesItem entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SectionCasesItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SectionCasesItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
