package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.SectionCover;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Section_Cover".
*/
public class SectionCoverDao extends AbstractDao<SectionCover, String> {

    public static final String TABLENAME = "Section_Cover";

    /**
     * Properties of entity SectionCover.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "id");
        public final static Property BackgroundColor = new Property(1, String.class, "backgroundColor", false, "backgroundColor");
        public final static Property Picture = new Property(2, String.class, "picture", false, "picture");
    }


    public SectionCoverDao(DaoConfig config) {
        super(config);
    }
    
    public SectionCoverDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SectionCover entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String backgroundColor = entity.getBackgroundColor();
        if (backgroundColor != null) {
            stmt.bindString(2, backgroundColor);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(3, picture);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SectionCover entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String backgroundColor = entity.getBackgroundColor();
        if (backgroundColor != null) {
            stmt.bindString(2, backgroundColor);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(3, picture);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SectionCover readEntity(Cursor cursor, int offset) {
        SectionCover entity = new SectionCover( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // backgroundColor
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // picture
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SectionCover entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBackgroundColor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPicture(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SectionCover entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SectionCover entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SectionCover entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
