package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.Chapter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Chapter".
*/
public class ChapterDao extends AbstractDao<Chapter, String> {

    public static final String TABLENAME = "Chapter";

    /**
     * Properties of entity Chapter.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "id");
        public final static Property ChapterId = new Property(1, String.class, "chapterId", false, "chapterId");
        public final static Property Icon = new Property(2, String.class, "icon", false, "icon");
        public final static Property Name = new Property(3, String.class, "name", false, "name");
        public final static Property Order = new Property(4, int.class, "order", false, "f_order");
        public final static Property Piece = new Property(5, String.class, "piece", false, "piece");
        public final static Property PieceId = new Property(6, String.class, "pieceId", false, "pieceId");
        public final static Property BookHTML_id = new Property(7, int.class, "bookHTML_id", false, "bookHTML_id");
    }


    public ChapterDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Chapter entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(2, chapterId);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(3, icon);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getOrder());
 
        String piece = entity.getPiece();
        if (piece != null) {
            stmt.bindString(6, piece);
        }
 
        String pieceId = entity.getPieceId();
        if (pieceId != null) {
            stmt.bindString(7, pieceId);
        }
        stmt.bindLong(8, entity.getBookHTML_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Chapter entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(2, chapterId);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(3, icon);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getOrder());
 
        String piece = entity.getPiece();
        if (piece != null) {
            stmt.bindString(6, piece);
        }
 
        String pieceId = entity.getPieceId();
        if (pieceId != null) {
            stmt.bindString(7, pieceId);
        }
        stmt.bindLong(8, entity.getBookHTML_id());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Chapter readEntity(Cursor cursor, int offset) {
        Chapter entity = new Chapter( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chapterId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // icon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getInt(offset + 4), // order
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // piece
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pieceId
            cursor.getInt(offset + 7) // bookHTML_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Chapter entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChapterId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIcon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrder(cursor.getInt(offset + 4));
        entity.setPiece(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPieceId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBookHTML_id(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Chapter entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Chapter entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Chapter entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
