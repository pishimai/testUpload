package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.SectionMainPoints;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Section_MainPoints".
*/
public class SectionMainPointsDao extends AbstractDao<SectionMainPoints, Void> {

    public static final String TABLENAME = "Section_MainPoints";

    /**
     * Properties of entity SectionMainPoints.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property ChapterId = new Property(1, String.class, "chapterId", false, "chapterId");
        public final static Property ChapterName = new Property(2, String.class, "chapterName", false, "chapterName");
        public final static Property Piece = new Property(3, String.class, "piece", false, "piece");
        public final static Property PieceId = new Property(4, String.class, "pieceId", false, "pieceId");
    }


    public SectionMainPointsDao(DaoConfig config) {
        super(config);
    }
    
    public SectionMainPointsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SectionMainPoints entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(2, chapterId);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(3, chapterName);
        }
 
        String piece = entity.getPiece();
        if (piece != null) {
            stmt.bindString(4, piece);
        }
 
        String pieceId = entity.getPieceId();
        if (pieceId != null) {
            stmt.bindString(5, pieceId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SectionMainPoints entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(2, chapterId);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(3, chapterName);
        }
 
        String piece = entity.getPiece();
        if (piece != null) {
            stmt.bindString(4, piece);
        }
 
        String pieceId = entity.getPieceId();
        if (pieceId != null) {
            stmt.bindString(5, pieceId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SectionMainPoints readEntity(Cursor cursor, int offset) {
        SectionMainPoints entity = new SectionMainPoints( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chapterId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chapterName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // piece
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // pieceId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SectionMainPoints entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChapterId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChapterName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPiece(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPieceId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SectionMainPoints entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SectionMainPoints entity) {
        return null;
    }

    @Override
    public boolean hasKey(SectionMainPoints entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
