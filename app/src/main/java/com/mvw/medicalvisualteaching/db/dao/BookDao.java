package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Book".
*/
public class BookDao extends AbstractDao<Book, String> {

    public static final String TABLENAME = "Book";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Path = new Property(0, String.class, "path", false, "path");
        public final static Property DownloadState = new Property(1, String.class, "downloadState", false, "downloadState");
        public final static Property Total = new Property(2, int.class, "total", false, "total");
        public final static Property Downloaded = new Property(3, int.class, "downloaded", false, "downloaded");
        public final static Property DownloadPath = new Property(4, String.class, "downloadPath", false, "downloadPath");
        public final static Property DownloadFile = new Property(5, String.class, "downloadFile", false, "downloadFile");
        public final static Property DownloadPatchPath = new Property(6, String.class, "downloadPatchPath", false, "downloadPatchPath");
        public final static Property TextbookType = new Property(7, String.class, "textbookType", false, "textbookType");
        public final static Property Isbn = new Property(8, String.class, "isbn", true, "isbn");
        public final static Property Id = new Property(9, String.class, "id", false, "id");
        public final static Property Textbook = new Property(10, String.class, "textbook", false, "textbook");
        public final static Property PackageName = new Property(11, String.class, "packageName", false, "packageName");
        public final static Property CategoryId = new Property(12, String.class, "categoryId", false, "categoryId");
        public final static Property PackageId = new Property(13, String.class, "packageId", false, "packageId");
        public final static Property Type = new Property(14, String.class, "type", false, "type");
        public final static Property BookSet = new Property(15, String.class, "bookSet", false, "bookSet");
        public final static Property CategoryName = new Property(16, String.class, "categoryName", false, "categoryName");
        public final static Property IsExpired = new Property(17, String.class, "isExpired", false, "isExpired");
        public final static Property Cover = new Property(18, String.class, "cover", false, "cover");
        public final static Property CoverBase = new Property(19, String.class, "coverBase", false, "coverBase");
        public final static Property BuyStatus = new Property(20, String.class, "buyStatus", false, "buyStatus");
        public final static Property IsFree = new Property(21, String.class, "isFree", false, "isFree");
        public final static Property PackageIsFree = new Property(22, String.class, "packageIsFree", false, "packageIsFree");
        public final static Property Name = new Property(23, String.class, "name", false, "name");
        public final static Property Day = new Property(24, String.class, "day", false, "day");
        public final static Property BookDeadline = new Property(25, String.class, "bookDeadline", false, "bookDeadline");
        public final static Property CreateDate = new Property(26, String.class, "createDate", false, "createDate");
        public final static Property Size = new Property(27, String.class, "size", false, "size");
        public final static Property S9id = new Property(28, String.class, "s9id", false, "s9id");
        public final static Property Author = new Property(29, String.class, "author", false, "author");
        public final static Property Editor = new Property(30, String.class, "editor", false, "editor");
        public final static Property PatchVersion = new Property(31, String.class, "patchVersion", false, "patchVersion");
        public final static Property PatchPath = new Property(32, String.class, "patchPath", false, "patchPath");
        public final static Property Sequence = new Property(33, String.class, "sequence", false, "sequence");
        public final static Property NonWifi = new Property(34, String.class, "nonWifi", false, "nonWifi");
        public final static Property ShelfStatus = new Property(35, String.class, "shelfStatus", false, "shelfStatus");
    }


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Book\" (" + //
                "\"path\" TEXT," + // 0: path
                "\"downloadState\" TEXT," + // 1: downloadState
                "\"total\" INTEGER NOT NULL ," + // 2: total
                "\"downloaded\" INTEGER NOT NULL ," + // 3: downloaded
                "\"downloadPath\" TEXT," + // 4: downloadPath
                "\"downloadFile\" TEXT," + // 5: downloadFile
                "\"downloadPatchPath\" TEXT," + // 6: downloadPatchPath
                "\"textbookType\" TEXT," + // 7: textbookType
                "\"isbn\" TEXT PRIMARY KEY NOT NULL ," + // 8: isbn
                "\"id\" TEXT," + // 9: id
                "\"textbook\" TEXT," + // 10: textbook
                "\"packageName\" TEXT," + // 11: packageName
                "\"categoryId\" TEXT," + // 12: categoryId
                "\"packageId\" TEXT," + // 13: packageId
                "\"type\" TEXT," + // 14: type
                "\"bookSet\" TEXT," + // 15: bookSet
                "\"categoryName\" TEXT," + // 16: categoryName
                "\"isExpired\" TEXT," + // 17: isExpired
                "\"cover\" TEXT," + // 18: cover
                "\"coverBase\" TEXT," + // 19: coverBase
                "\"buyStatus\" TEXT," + // 20: buyStatus
                "\"isFree\" TEXT," + // 21: isFree
                "\"packageIsFree\" TEXT," + // 22: packageIsFree
                "\"name\" TEXT," + // 23: name
                "\"day\" TEXT," + // 24: day
                "\"bookDeadline\" TEXT," + // 25: bookDeadline
                "\"createDate\" TEXT," + // 26: createDate
                "\"size\" TEXT," + // 27: size
                "\"s9id\" TEXT," + // 28: s9id
                "\"author\" TEXT," + // 29: author
                "\"editor\" TEXT," + // 30: editor
                "\"patchVersion\" TEXT," + // 31: patchVersion
                "\"patchPath\" TEXT," + // 32: patchPath
                "\"sequence\" TEXT," + // 33: sequence
                "\"nonWifi\" TEXT," + // 34: nonWifi
                "\"shelfStatus\" TEXT);"); // 35: shelfStatus
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_Book_isbn ON Book" +
                " (\"isbn\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Book\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(1, path);
        }
 
        String downloadState = entity.getDownloadState();
        if (downloadState != null) {
            stmt.bindString(2, downloadState);
        }
        stmt.bindLong(3, entity.getTotal());
        stmt.bindLong(4, entity.getDownloaded());
 
        String downloadPath = entity.getDownloadPath();
        if (downloadPath != null) {
            stmt.bindString(5, downloadPath);
        }
 
        String downloadFile = entity.getDownloadFile();
        if (downloadFile != null) {
            stmt.bindString(6, downloadFile);
        }
 
        String downloadPatchPath = entity.getDownloadPatchPath();
        if (downloadPatchPath != null) {
            stmt.bindString(7, downloadPatchPath);
        }
 
        String textbookType = entity.getTextbookType();
        if (textbookType != null) {
            stmt.bindString(8, textbookType);
        }
 
        String isbn = entity.getIsbn();
        if (isbn != null) {
            stmt.bindString(9, isbn);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(10, id);
        }
 
        String textbook = entity.getTextbook();
        if (textbook != null) {
            stmt.bindString(11, textbook);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(12, packageName);
        }
 
        String categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindString(13, categoryId);
        }
 
        String packageId = entity.getPackageId();
        if (packageId != null) {
            stmt.bindString(14, packageId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(15, type);
        }
 
        String bookSet = entity.getBookSet();
        if (bookSet != null) {
            stmt.bindString(16, bookSet);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(17, categoryName);
        }
 
        String isExpired = entity.getIsExpired();
        if (isExpired != null) {
            stmt.bindString(18, isExpired);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(19, cover);
        }
 
        String coverBase = entity.getCoverBase();
        if (coverBase != null) {
            stmt.bindString(20, coverBase);
        }
 
        String buyStatus = entity.getBuyStatus();
        if (buyStatus != null) {
            stmt.bindString(21, buyStatus);
        }
 
        String isFree = entity.getIsFree();
        if (isFree != null) {
            stmt.bindString(22, isFree);
        }
 
        String packageIsFree = entity.getPackageIsFree();
        if (packageIsFree != null) {
            stmt.bindString(23, packageIsFree);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(24, name);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(25, day);
        }
 
        String bookDeadline = entity.getBookDeadline();
        if (bookDeadline != null) {
            stmt.bindString(26, bookDeadline);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(27, createDate);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(28, size);
        }
 
        String s9id = entity.getS9id();
        if (s9id != null) {
            stmt.bindString(29, s9id);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(30, author);
        }
 
        String editor = entity.getEditor();
        if (editor != null) {
            stmt.bindString(31, editor);
        }
 
        String patchVersion = entity.getPatchVersion();
        if (patchVersion != null) {
            stmt.bindString(32, patchVersion);
        }
 
        String patchPath = entity.getPatchPath();
        if (patchPath != null) {
            stmt.bindString(33, patchPath);
        }
 
        String sequence = entity.getSequence();
        if (sequence != null) {
            stmt.bindString(34, sequence);
        }
 
        String nonWifi = entity.getNonWifi();
        if (nonWifi != null) {
            stmt.bindString(35, nonWifi);
        }
 
        String shelfStatus = entity.getShelfStatus();
        if (shelfStatus != null) {
            stmt.bindString(36, shelfStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(1, path);
        }
 
        String downloadState = entity.getDownloadState();
        if (downloadState != null) {
            stmt.bindString(2, downloadState);
        }
        stmt.bindLong(3, entity.getTotal());
        stmt.bindLong(4, entity.getDownloaded());
 
        String downloadPath = entity.getDownloadPath();
        if (downloadPath != null) {
            stmt.bindString(5, downloadPath);
        }
 
        String downloadFile = entity.getDownloadFile();
        if (downloadFile != null) {
            stmt.bindString(6, downloadFile);
        }
 
        String downloadPatchPath = entity.getDownloadPatchPath();
        if (downloadPatchPath != null) {
            stmt.bindString(7, downloadPatchPath);
        }
 
        String textbookType = entity.getTextbookType();
        if (textbookType != null) {
            stmt.bindString(8, textbookType);
        }
 
        String isbn = entity.getIsbn();
        if (isbn != null) {
            stmt.bindString(9, isbn);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(10, id);
        }
 
        String textbook = entity.getTextbook();
        if (textbook != null) {
            stmt.bindString(11, textbook);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(12, packageName);
        }
 
        String categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindString(13, categoryId);
        }
 
        String packageId = entity.getPackageId();
        if (packageId != null) {
            stmt.bindString(14, packageId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(15, type);
        }
 
        String bookSet = entity.getBookSet();
        if (bookSet != null) {
            stmt.bindString(16, bookSet);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(17, categoryName);
        }
 
        String isExpired = entity.getIsExpired();
        if (isExpired != null) {
            stmt.bindString(18, isExpired);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(19, cover);
        }
 
        String coverBase = entity.getCoverBase();
        if (coverBase != null) {
            stmt.bindString(20, coverBase);
        }
 
        String buyStatus = entity.getBuyStatus();
        if (buyStatus != null) {
            stmt.bindString(21, buyStatus);
        }
 
        String isFree = entity.getIsFree();
        if (isFree != null) {
            stmt.bindString(22, isFree);
        }
 
        String packageIsFree = entity.getPackageIsFree();
        if (packageIsFree != null) {
            stmt.bindString(23, packageIsFree);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(24, name);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(25, day);
        }
 
        String bookDeadline = entity.getBookDeadline();
        if (bookDeadline != null) {
            stmt.bindString(26, bookDeadline);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(27, createDate);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(28, size);
        }
 
        String s9id = entity.getS9id();
        if (s9id != null) {
            stmt.bindString(29, s9id);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(30, author);
        }
 
        String editor = entity.getEditor();
        if (editor != null) {
            stmt.bindString(31, editor);
        }
 
        String patchVersion = entity.getPatchVersion();
        if (patchVersion != null) {
            stmt.bindString(32, patchVersion);
        }
 
        String patchPath = entity.getPatchPath();
        if (patchPath != null) {
            stmt.bindString(33, patchPath);
        }
 
        String sequence = entity.getSequence();
        if (sequence != null) {
            stmt.bindString(34, sequence);
        }
 
        String nonWifi = entity.getNonWifi();
        if (nonWifi != null) {
            stmt.bindString(35, nonWifi);
        }
 
        String shelfStatus = entity.getShelfStatus();
        if (shelfStatus != null) {
            stmt.bindString(36, shelfStatus);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8);
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // path
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // downloadState
            cursor.getInt(offset + 2), // total
            cursor.getInt(offset + 3), // downloaded
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // downloadPath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // downloadFile
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // downloadPatchPath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // textbookType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isbn
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // textbook
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // packageName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // categoryId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // packageId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // type
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // bookSet
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // categoryName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // isExpired
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // cover
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // coverBase
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // buyStatus
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // isFree
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // packageIsFree
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // name
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // day
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // bookDeadline
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // createDate
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // size
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // s9id
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // author
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // editor
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // patchVersion
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // patchPath
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // sequence
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // nonWifi
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35) // shelfStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setPath(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDownloadState(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTotal(cursor.getInt(offset + 2));
        entity.setDownloaded(cursor.getInt(offset + 3));
        entity.setDownloadPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDownloadFile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDownloadPatchPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTextbookType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsbn(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTextbook(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPackageName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCategoryId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPackageId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBookSet(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCategoryName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsExpired(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCover(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCoverBase(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBuyStatus(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setIsFree(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPackageIsFree(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setName(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDay(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setBookDeadline(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setCreateDate(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setSize(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setS9id(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setAuthor(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setEditor(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setPatchVersion(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setPatchPath(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setSequence(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setNonWifi(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setShelfStatus(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Book entity, long rowId) {
        return entity.getIsbn();
    }
    
    @Override
    public String getKey(Book entity) {
        if(entity != null) {
            return entity.getIsbn();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Book entity) {
        return entity.getIsbn() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
