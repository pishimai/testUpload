package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.LocalBook;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Book".
*/
public class LocalBookDao extends AbstractDao<LocalBook, Void> {

    public static final String TABLENAME = "Book";

    /**
     * Properties of entity LocalBook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Isbn = new Property(2, String.class, "isbn", false, "isbn");
        public final static Property Cover = new Property(3, String.class, "cover", false, "cover");
        public final static Property SmallCover = new Property(4, String.class, "smallCover", false, "smallCover");
        public final static Property Edition = new Property(5, String.class, "edition", false, "edition");
        public final static Property PublishingOrgan = new Property(6, String.class, "publishingOrgan", false, "publishingOrgan");
        public final static Property PublishingTime = new Property(7, String.class, "publishingTime", false, "publishingTime");
        public final static Property Editor = new Property(8, String.class, "editor", false, "editor");
        public final static Property SubEditor = new Property(9, String.class, "subEditor", false, "subEditor");
        public final static Property Umpire = new Property(10, String.class, "umpire", false, "umpire");
        public final static Property TotalCount = new Property(11, String.class, "totalCount", false, "totalCount");
        public final static Property Abstracts = new Property(12, String.class, "abstracts", false, "abstracts");
        public final static Property Dtype = new Property(13, String.class, "dtype", false, "DTYPE");
    }


    public LocalBookDao(DaoConfig config) {
        super(config);
    }
    
    public LocalBookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalBook entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String isbn = entity.getIsbn();
        if (isbn != null) {
            stmt.bindString(3, isbn);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(4, cover);
        }
 
        String smallCover = entity.getSmallCover();
        if (smallCover != null) {
            stmt.bindString(5, smallCover);
        }
 
        String edition = entity.getEdition();
        if (edition != null) {
            stmt.bindString(6, edition);
        }
 
        String publishingOrgan = entity.getPublishingOrgan();
        if (publishingOrgan != null) {
            stmt.bindString(7, publishingOrgan);
        }
 
        String publishingTime = entity.getPublishingTime();
        if (publishingTime != null) {
            stmt.bindString(8, publishingTime);
        }
 
        String editor = entity.getEditor();
        if (editor != null) {
            stmt.bindString(9, editor);
        }
 
        String subEditor = entity.getSubEditor();
        if (subEditor != null) {
            stmt.bindString(10, subEditor);
        }
 
        String umpire = entity.getUmpire();
        if (umpire != null) {
            stmt.bindString(11, umpire);
        }
 
        String totalCount = entity.getTotalCount();
        if (totalCount != null) {
            stmt.bindString(12, totalCount);
        }
 
        String abstracts = entity.getAbstracts();
        if (abstracts != null) {
            stmt.bindString(13, abstracts);
        }
 
        String dtype = entity.getDtype();
        if (dtype != null) {
            stmt.bindString(14, dtype);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalBook entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String isbn = entity.getIsbn();
        if (isbn != null) {
            stmt.bindString(3, isbn);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(4, cover);
        }
 
        String smallCover = entity.getSmallCover();
        if (smallCover != null) {
            stmt.bindString(5, smallCover);
        }
 
        String edition = entity.getEdition();
        if (edition != null) {
            stmt.bindString(6, edition);
        }
 
        String publishingOrgan = entity.getPublishingOrgan();
        if (publishingOrgan != null) {
            stmt.bindString(7, publishingOrgan);
        }
 
        String publishingTime = entity.getPublishingTime();
        if (publishingTime != null) {
            stmt.bindString(8, publishingTime);
        }
 
        String editor = entity.getEditor();
        if (editor != null) {
            stmt.bindString(9, editor);
        }
 
        String subEditor = entity.getSubEditor();
        if (subEditor != null) {
            stmt.bindString(10, subEditor);
        }
 
        String umpire = entity.getUmpire();
        if (umpire != null) {
            stmt.bindString(11, umpire);
        }
 
        String totalCount = entity.getTotalCount();
        if (totalCount != null) {
            stmt.bindString(12, totalCount);
        }
 
        String abstracts = entity.getAbstracts();
        if (abstracts != null) {
            stmt.bindString(13, abstracts);
        }
 
        String dtype = entity.getDtype();
        if (dtype != null) {
            stmt.bindString(14, dtype);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LocalBook readEntity(Cursor cursor, int offset) {
        LocalBook entity = new LocalBook( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // isbn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cover
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // smallCover
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // edition
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // publishingOrgan
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // publishingTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // editor
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // subEditor
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // umpire
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // totalCount
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // abstracts
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // dtype
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalBook entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsbn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCover(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSmallCover(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEdition(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPublishingOrgan(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPublishingTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEditor(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSubEditor(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUmpire(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTotalCount(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAbstracts(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDtype(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LocalBook entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LocalBook entity) {
        return null;
    }

    @Override
    public boolean hasKey(LocalBook entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
