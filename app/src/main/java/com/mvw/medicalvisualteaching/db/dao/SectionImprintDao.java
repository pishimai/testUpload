package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.SectionImprint;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Section_Imprint".
*/
public class SectionImprintDao extends AbstractDao<SectionImprint, Void> {

    public static final String TABLENAME = "Section_Imprint";

    /**
     * Properties of entity SectionImprint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Count = new Property(1, String.class, "count", false, "count");
        public final static Property Distributing = new Property(2, String.class, "distributing", false, "distributing");
        public final static Property DistributingAddress = new Property(3, String.class, "distributingAddress", false, "distributingAddress");
        public final static Property DistributingDate = new Property(4, String.class, "distributingDate", false, "distributingDate");
        public final static Property DistributingPostcode = new Property(5, String.class, "distributingPostcode", false, "distributingPostcode");
        public final static Property Email = new Property(6, String.class, "email", false, "email");
        public final static Property Hotline = new Property(7, String.class, "hotline", false, "hotline");
        public final static Property Isbn = new Property(8, String.class, "isbn", false, "isbn");
        public final static Property Operator = new Property(9, String.class, "operator", false, "operator");
        public final static Property Phone = new Property(10, String.class, "phone", false, "phone");
        public final static Property Price = new Property(11, String.class, "price", false, "price");
        public final static Property Producer = new Property(12, String.class, "producer", false, "producer");
        public final static Property ProducerAddress = new Property(13, String.class, "producerAddress", false, "producerAddress");
        public final static Property Publish = new Property(14, String.class, "publish", false, "publish");
        public final static Property PublishAddress = new Property(15, String.class, "publishAddress", false, "publishAddress");
        public final static Property PublishPostcode = new Property(16, String.class, "publishPostcode", false, "publishPostcode");
        public final static Property SubjectName = new Property(17, String.class, "subjectName", false, "subject");
        public final static Property Version = new Property(18, String.class, "version", false, "version");
    }


    public SectionImprintDao(DaoConfig config) {
        super(config);
    }
    
    public SectionImprintDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SectionImprint entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(2, count);
        }
 
        String distributing = entity.getDistributing();
        if (distributing != null) {
            stmt.bindString(3, distributing);
        }
 
        String distributingAddress = entity.getDistributingAddress();
        if (distributingAddress != null) {
            stmt.bindString(4, distributingAddress);
        }
 
        String distributingDate = entity.getDistributingDate();
        if (distributingDate != null) {
            stmt.bindString(5, distributingDate);
        }
 
        String distributingPostcode = entity.getDistributingPostcode();
        if (distributingPostcode != null) {
            stmt.bindString(6, distributingPostcode);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String hotline = entity.getHotline();
        if (hotline != null) {
            stmt.bindString(8, hotline);
        }
 
        String isbn = entity.getIsbn();
        if (isbn != null) {
            stmt.bindString(9, isbn);
        }
 
        String operator = entity.getOperator();
        if (operator != null) {
            stmt.bindString(10, operator);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(12, price);
        }
 
        String producer = entity.getProducer();
        if (producer != null) {
            stmt.bindString(13, producer);
        }
 
        String producerAddress = entity.getProducerAddress();
        if (producerAddress != null) {
            stmt.bindString(14, producerAddress);
        }
 
        String publish = entity.getPublish();
        if (publish != null) {
            stmt.bindString(15, publish);
        }
 
        String publishAddress = entity.getPublishAddress();
        if (publishAddress != null) {
            stmt.bindString(16, publishAddress);
        }
 
        String publishPostcode = entity.getPublishPostcode();
        if (publishPostcode != null) {
            stmt.bindString(17, publishPostcode);
        }
 
        String subjectName = entity.getSubjectName();
        if (subjectName != null) {
            stmt.bindString(18, subjectName);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(19, version);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SectionImprint entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(2, count);
        }
 
        String distributing = entity.getDistributing();
        if (distributing != null) {
            stmt.bindString(3, distributing);
        }
 
        String distributingAddress = entity.getDistributingAddress();
        if (distributingAddress != null) {
            stmt.bindString(4, distributingAddress);
        }
 
        String distributingDate = entity.getDistributingDate();
        if (distributingDate != null) {
            stmt.bindString(5, distributingDate);
        }
 
        String distributingPostcode = entity.getDistributingPostcode();
        if (distributingPostcode != null) {
            stmt.bindString(6, distributingPostcode);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String hotline = entity.getHotline();
        if (hotline != null) {
            stmt.bindString(8, hotline);
        }
 
        String isbn = entity.getIsbn();
        if (isbn != null) {
            stmt.bindString(9, isbn);
        }
 
        String operator = entity.getOperator();
        if (operator != null) {
            stmt.bindString(10, operator);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(12, price);
        }
 
        String producer = entity.getProducer();
        if (producer != null) {
            stmt.bindString(13, producer);
        }
 
        String producerAddress = entity.getProducerAddress();
        if (producerAddress != null) {
            stmt.bindString(14, producerAddress);
        }
 
        String publish = entity.getPublish();
        if (publish != null) {
            stmt.bindString(15, publish);
        }
 
        String publishAddress = entity.getPublishAddress();
        if (publishAddress != null) {
            stmt.bindString(16, publishAddress);
        }
 
        String publishPostcode = entity.getPublishPostcode();
        if (publishPostcode != null) {
            stmt.bindString(17, publishPostcode);
        }
 
        String subjectName = entity.getSubjectName();
        if (subjectName != null) {
            stmt.bindString(18, subjectName);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(19, version);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SectionImprint readEntity(Cursor cursor, int offset) {
        SectionImprint entity = new SectionImprint( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // count
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // distributing
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // distributingAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // distributingDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // distributingPostcode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hotline
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isbn
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // operator
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // phone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // price
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // producer
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // producerAddress
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // publish
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // publishAddress
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // publishPostcode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // subjectName
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // version
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SectionImprint entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDistributing(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDistributingAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDistributingDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDistributingPostcode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHotline(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsbn(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOperator(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPrice(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setProducer(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setProducerAddress(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPublish(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPublishAddress(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPublishPostcode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSubjectName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setVersion(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SectionImprint entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SectionImprint entity) {
        return null;
    }

    @Override
    public boolean hasKey(SectionImprint entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
