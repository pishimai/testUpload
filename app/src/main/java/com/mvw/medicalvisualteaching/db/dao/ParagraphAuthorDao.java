package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.ParagraphAuthor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Paragraph_Author".
*/
public class ParagraphAuthorDao extends AbstractDao<ParagraphAuthor, Void> {

    public static final String TABLENAME = "Paragraph_Author";

    /**
     * Properties of entity ParagraphAuthor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Paragraph_id = new Property(0, String.class, "Paragraph_id", false, "Paragraph_id");
        public final static Property Authors_id = new Property(1, String.class, "authors_id", false, "authors_id");
    }


    public ParagraphAuthorDao(DaoConfig config) {
        super(config);
    }
    
    public ParagraphAuthorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ParagraphAuthor entity) {
        stmt.clearBindings();
 
        String Paragraph_id = entity.getParagraph_id();
        if (Paragraph_id != null) {
            stmt.bindString(1, Paragraph_id);
        }
 
        String authors_id = entity.getAuthors_id();
        if (authors_id != null) {
            stmt.bindString(2, authors_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ParagraphAuthor entity) {
        stmt.clearBindings();
 
        String Paragraph_id = entity.getParagraph_id();
        if (Paragraph_id != null) {
            stmt.bindString(1, Paragraph_id);
        }
 
        String authors_id = entity.getAuthors_id();
        if (authors_id != null) {
            stmt.bindString(2, authors_id);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ParagraphAuthor readEntity(Cursor cursor, int offset) {
        ParagraphAuthor entity = new ParagraphAuthor( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Paragraph_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // authors_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ParagraphAuthor entity, int offset) {
        entity.setParagraph_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAuthors_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ParagraphAuthor entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ParagraphAuthor entity) {
        return null;
    }

    @Override
    public boolean hasKey(ParagraphAuthor entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
