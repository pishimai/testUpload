package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.Exam;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Exam".
*/
public class ExamDao extends AbstractDao<Exam, String> {

    public static final String TABLENAME = "Exam";

    /**
     * Properties of entity Exam.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "id");
        public final static Property ExamId = new Property(1, String.class, "examId", false, "examId");
        public final static Property QuestionId = new Property(2, String.class, "questionId", false, "questionId");
        public final static Property Answer = new Property(3, String.class, "answer", false, "answer");
        public final static Property Remark1 = new Property(4, String.class, "remark1", false, "remark1");
        public final static Property Remark2 = new Property(5, String.class, "remark2", false, "remark2");
        public final static Property LeftSeconds = new Property(6, long.class, "leftSeconds", false, "leftSeconds");
        public final static Property CreateTime = new Property(7, java.util.Date.class, "createTime", false, "createTime");
    }


    public ExamDao(DaoConfig config) {
        super(config);
    }
    
    public ExamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Exam\" (" + //
                "\"id\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"examId\" TEXT," + // 1: examId
                "\"questionId\" TEXT," + // 2: questionId
                "\"answer\" TEXT," + // 3: answer
                "\"remark1\" TEXT," + // 4: remark1
                "\"remark2\" TEXT," + // 5: remark2
                "\"leftSeconds\" INTEGER NOT NULL ," + // 6: leftSeconds
                "\"createTime\" INTEGER);"); // 7: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Exam\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Exam entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String examId = entity.getExamId();
        if (examId != null) {
            stmt.bindString(2, examId);
        }
 
        String questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindString(3, questionId);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(4, answer);
        }
 
        String remark1 = entity.getRemark1();
        if (remark1 != null) {
            stmt.bindString(5, remark1);
        }
 
        String remark2 = entity.getRemark2();
        if (remark2 != null) {
            stmt.bindString(6, remark2);
        }
        stmt.bindLong(7, entity.getLeftSeconds());
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(8, createTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Exam entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String examId = entity.getExamId();
        if (examId != null) {
            stmt.bindString(2, examId);
        }
 
        String questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindString(3, questionId);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(4, answer);
        }
 
        String remark1 = entity.getRemark1();
        if (remark1 != null) {
            stmt.bindString(5, remark1);
        }
 
        String remark2 = entity.getRemark2();
        if (remark2 != null) {
            stmt.bindString(6, remark2);
        }
        stmt.bindLong(7, entity.getLeftSeconds());
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(8, createTime.getTime());
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Exam readEntity(Cursor cursor, int offset) {
        Exam entity = new Exam( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // examId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // questionId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // answer
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remark1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remark2
            cursor.getLong(offset + 6), // leftSeconds
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Exam entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setExamId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQuestionId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAnswer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemark1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemark2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLeftSeconds(cursor.getLong(offset + 6));
        entity.setCreateTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Exam entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Exam entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Exam entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
