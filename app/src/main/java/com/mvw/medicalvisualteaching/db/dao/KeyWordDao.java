package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.KeyWord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KeyWord".
*/
public class KeyWordDao extends AbstractDao<KeyWord, Void> {

    public static final String TABLENAME = "KeyWord";

    /**
     * Properties of entity KeyWord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Word = new Property(2, String.class, "word", false, "word");
        public final static Property Type = new Property(3, int.class, "type", false, "type");
        public final static Property Link = new Property(4, String.class, "link", false, "link");
        public final static Property Extend = new Property(5, String.class, "extend", false, "extend");
        public final static Property Paragraph_id = new Property(6, String.class, "paragraph_id", false, "paragraph_id");
        public final static Property ReadAudio = new Property(7, String.class, "readAudio", false, "readAudio");
    }


    public KeyWordDao(DaoConfig config) {
        super(config);
    }
    
    public KeyWordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KeyWord entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(3, word);
        }
        stmt.bindLong(4, entity.getType());
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(5, link);
        }
 
        String extend = entity.getExtend();
        if (extend != null) {
            stmt.bindString(6, extend);
        }
 
        String paragraph_id = entity.getParagraph_id();
        if (paragraph_id != null) {
            stmt.bindString(7, paragraph_id);
        }
 
        String readAudio = entity.getReadAudio();
        if (readAudio != null) {
            stmt.bindString(8, readAudio);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KeyWord entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(3, word);
        }
        stmt.bindLong(4, entity.getType());
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(5, link);
        }
 
        String extend = entity.getExtend();
        if (extend != null) {
            stmt.bindString(6, extend);
        }
 
        String paragraph_id = entity.getParagraph_id();
        if (paragraph_id != null) {
            stmt.bindString(7, paragraph_id);
        }
 
        String readAudio = entity.getReadAudio();
        if (readAudio != null) {
            stmt.bindString(8, readAudio);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public KeyWord readEntity(Cursor cursor, int offset) {
        KeyWord entity = new KeyWord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // word
            cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // link
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // extend
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // paragraph_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // readAudio
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KeyWord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWord(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExtend(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setParagraph_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReadAudio(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(KeyWord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(KeyWord entity) {
        return null;
    }

    @Override
    public boolean hasKey(KeyWord entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
