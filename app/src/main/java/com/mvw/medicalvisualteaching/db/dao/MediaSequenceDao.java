package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.MediaSequence;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MediaSequence".
*/
public class MediaSequenceDao extends AbstractDao<MediaSequence, Void> {

    public static final String TABLENAME = "MediaSequence";

    /**
     * Properties of entity MediaSequence.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "id");
        public final static Property Pattern = new Property(1, String.class, "pattern", false, "pattern");
        public final static Property Count = new Property(2, int.class, "count", false, "count");
        public final static Property Type = new Property(3, String.class, "type", false, "type");
        public final static Property Step = new Property(4, int.class, "step", false, "step");
        public final static Property Reverse = new Property(5, int.class, "reverse", false, "reverse");
    }


    public MediaSequenceDao(DaoConfig config) {
        super(config);
    }
    
    public MediaSequenceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MediaSequence entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String pattern = entity.getPattern();
        if (pattern != null) {
            stmt.bindString(2, pattern);
        }
        stmt.bindLong(3, entity.getCount());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
        stmt.bindLong(5, entity.getStep());
        stmt.bindLong(6, entity.getReverse());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MediaSequence entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String pattern = entity.getPattern();
        if (pattern != null) {
            stmt.bindString(2, pattern);
        }
        stmt.bindLong(3, entity.getCount());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
        stmt.bindLong(5, entity.getStep());
        stmt.bindLong(6, entity.getReverse());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MediaSequence readEntity(Cursor cursor, int offset) {
        MediaSequence entity = new MediaSequence( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pattern
            cursor.getInt(offset + 2), // count
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.getInt(offset + 4), // step
            cursor.getInt(offset + 5) // reverse
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MediaSequence entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPattern(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCount(cursor.getInt(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStep(cursor.getInt(offset + 4));
        entity.setReverse(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MediaSequence entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MediaSequence entity) {
        return null;
    }

    @Override
    public boolean hasKey(MediaSequence entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
