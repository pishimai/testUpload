package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.SectionTranslate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Translate".
*/
public class SectionTranslateDao extends AbstractDao<SectionTranslate, String> {

    public static final String TABLENAME = "Translate";

    /**
     * Properties of entity SectionTranslate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "id");
        public final static Property Chinese = new Property(1, String.class, "chinese", false, "chinese");
        public final static Property English = new Property(2, String.class, "english", false, "english");
        public final static Property Initial = new Property(3, String.class, "initial", false, "initial");
        public final static Property Dtype = new Property(4, String.class, "dtype", false, "DTYPE");
    }


    public SectionTranslateDao(DaoConfig config) {
        super(config);
    }
    
    public SectionTranslateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SectionTranslate entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String chinese = entity.getChinese();
        if (chinese != null) {
            stmt.bindString(2, chinese);
        }
 
        String english = entity.getEnglish();
        if (english != null) {
            stmt.bindString(3, english);
        }
 
        String initial = entity.getInitial();
        if (initial != null) {
            stmt.bindString(4, initial);
        }
 
        String dtype = entity.getDtype();
        if (dtype != null) {
            stmt.bindString(5, dtype);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SectionTranslate entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String chinese = entity.getChinese();
        if (chinese != null) {
            stmt.bindString(2, chinese);
        }
 
        String english = entity.getEnglish();
        if (english != null) {
            stmt.bindString(3, english);
        }
 
        String initial = entity.getInitial();
        if (initial != null) {
            stmt.bindString(4, initial);
        }
 
        String dtype = entity.getDtype();
        if (dtype != null) {
            stmt.bindString(5, dtype);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SectionTranslate readEntity(Cursor cursor, int offset) {
        SectionTranslate entity = new SectionTranslate( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chinese
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // english
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // initial
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // dtype
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SectionTranslate entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChinese(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEnglish(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInitial(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDtype(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SectionTranslate entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SectionTranslate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SectionTranslate entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
