package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.SectionDocumentItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DocumentItem".
*/
public class SectionDocumentItemDao extends AbstractDao<SectionDocumentItem, Void> {

    public static final String TABLENAME = "DocumentItem";

    /**
     * Properties of entity SectionDocumentItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "id");
        public final static Property Indicator = new Property(1, String.class, "indicator", false, "indicator");
        public final static Property Item = new Property(2, String.class, "item", false, "item");
        public final static Property Document_id = new Property(3, String.class, "document_id", false, "document_id");
    }


    public SectionDocumentItemDao(DaoConfig config) {
        super(config);
    }
    
    public SectionDocumentItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SectionDocumentItem entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String indicator = entity.getIndicator();
        if (indicator != null) {
            stmt.bindString(2, indicator);
        }
 
        String item = entity.getItem();
        if (item != null) {
            stmt.bindString(3, item);
        }
 
        String document_id = entity.getDocument_id();
        if (document_id != null) {
            stmt.bindString(4, document_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SectionDocumentItem entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String indicator = entity.getIndicator();
        if (indicator != null) {
            stmt.bindString(2, indicator);
        }
 
        String item = entity.getItem();
        if (item != null) {
            stmt.bindString(3, item);
        }
 
        String document_id = entity.getDocument_id();
        if (document_id != null) {
            stmt.bindString(4, document_id);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SectionDocumentItem readEntity(Cursor cursor, int offset) {
        SectionDocumentItem entity = new SectionDocumentItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // indicator
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // item
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // document_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SectionDocumentItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIndicator(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItem(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDocument_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SectionDocumentItem entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SectionDocumentItem entity) {
        return null;
    }

    @Override
    public boolean hasKey(SectionDocumentItem entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
