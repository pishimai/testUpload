package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.MediaPPTItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MediaPPTItem".
*/
public class MediaPPTItemDao extends AbstractDao<MediaPPTItem, Void> {

    public static final String TABLENAME = "MediaPPTItem";

    /**
     * Properties of entity MediaPPTItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "id");
        public final static Property PptCombination_id = new Property(1, String.class, "pptCombination_id", false, "pptCombination_id");
        public final static Property Name = new Property(2, String.class, "name", false, "name");
        public final static Property Path = new Property(3, String.class, "path", false, "path");
    }


    public MediaPPTItemDao(DaoConfig config) {
        super(config);
    }
    
    public MediaPPTItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MediaPPTItem entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String pptCombination_id = entity.getPptCombination_id();
        if (pptCombination_id != null) {
            stmt.bindString(2, pptCombination_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MediaPPTItem entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String pptCombination_id = entity.getPptCombination_id();
        if (pptCombination_id != null) {
            stmt.bindString(2, pptCombination_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MediaPPTItem readEntity(Cursor cursor, int offset) {
        MediaPPTItem entity = new MediaPPTItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pptCombination_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MediaPPTItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPptCombination_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MediaPPTItem entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MediaPPTItem entity) {
        return null;
    }

    @Override
    public boolean hasKey(MediaPPTItem entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
