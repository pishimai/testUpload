package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "User".
*/
public class UserDao extends AbstractDao<User, Void> {

    public static final String TABLENAME = "User";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "id");
        public final static Property Token = new Property(1, String.class, "token", false, "token");
        public final static Property College = new Property(2, String.class, "college", false, "college");
        public final static Property City = new Property(3, String.class, "city", false, "city");
        public final static Property IdNo = new Property(4, String.class, "idNo", false, "idNo");
        public final static Property Major = new Property(5, String.class, "major", false, "major");
        public final static Property Department = new Property(6, String.class, "department", false, "department");
        public final static Property Email = new Property(7, String.class, "email", false, "email");
        public final static Property Area = new Property(8, String.class, "area", false, "area");
        public final static Property Qq = new Property(9, String.class, "qq", false, "qq");
        public final static Property Address = new Property(10, String.class, "address", false, "address");
        public final static Property NickName = new Property(11, String.class, "nickName", false, "nickName");
        public final static Property Portrait = new Property(12, String.class, "portrait", false, "portrait");
        public final static Property Unit = new Property(13, String.class, "unit", false, "unit");
        public final static Property Phone = new Property(14, String.class, "phone", false, "phone");
        public final static Property CaId = new Property(15, String.class, "caId", false, "caId");
        public final static Property ClassNo = new Property(16, String.class, "classNo", false, "classNo");
        public final static Property Name = new Property(17, String.class, "name", false, "name");
        public final static Property StudentNo = new Property(18, String.class, "studentNo", false, "studentNo");
        public final static Property Status = new Property(19, String.class, "status", false, "status");
        public final static Property InstituteNumber = new Property(20, String.class, "instituteNumber", false, "instituteNumber");
        public final static Property Comments = new Property(21, String.class, "comments", false, "comments");
        public final static Property Roles = new Property(22, String.class, "roles", false, "roles");
        public final static Property GenderCode = new Property(23, String.class, "genderCode", false, "genderCode");
        public final static Property Deleted = new Property(24, String.class, "deleted", false, "deleted");
        public final static Property Cellphone = new Property(25, String.class, "cellphone", false, "cellphone");
        public final static Property IdentificationNumber = new Property(26, String.class, "identificationNumber", false, "identificationNumber");
        public final static Property Pwd = new Property(27, String.class, "pwd", false, "pwd");
        public final static Property Account = new Property(28, String.class, "account", false, "account");
        public final static Property Guest = new Property(29, String.class, "guest", false, "guest");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"User\" (" + //
                "\"id\" TEXT UNIQUE ," + // 0: id
                "\"token\" TEXT," + // 1: token
                "\"college\" TEXT," + // 2: college
                "\"city\" TEXT," + // 3: city
                "\"idNo\" TEXT," + // 4: idNo
                "\"major\" TEXT," + // 5: major
                "\"department\" TEXT," + // 6: department
                "\"email\" TEXT," + // 7: email
                "\"area\" TEXT," + // 8: area
                "\"qq\" TEXT," + // 9: qq
                "\"address\" TEXT," + // 10: address
                "\"nickName\" TEXT," + // 11: nickName
                "\"portrait\" TEXT," + // 12: portrait
                "\"unit\" TEXT," + // 13: unit
                "\"phone\" TEXT," + // 14: phone
                "\"caId\" TEXT," + // 15: caId
                "\"classNo\" TEXT," + // 16: classNo
                "\"name\" TEXT," + // 17: name
                "\"studentNo\" TEXT," + // 18: studentNo
                "\"status\" TEXT," + // 19: status
                "\"instituteNumber\" TEXT," + // 20: instituteNumber
                "\"comments\" TEXT," + // 21: comments
                "\"roles\" TEXT," + // 22: roles
                "\"genderCode\" TEXT," + // 23: genderCode
                "\"deleted\" TEXT," + // 24: deleted
                "\"cellphone\" TEXT," + // 25: cellphone
                "\"identificationNumber\" TEXT," + // 26: identificationNumber
                "\"pwd\" TEXT," + // 27: pwd
                "\"account\" TEXT," + // 28: account
                "\"guest\" TEXT);"); // 29: guest
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"User\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        String college = entity.getCollege();
        if (college != null) {
            stmt.bindString(3, college);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String idNo = entity.getIdNo();
        if (idNo != null) {
            stmt.bindString(5, idNo);
        }
 
        String major = entity.getMajor();
        if (major != null) {
            stmt.bindString(6, major);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(7, department);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(9, area);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(10, qq);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(11, address);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(12, nickName);
        }
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(13, portrait);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(14, unit);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(15, phone);
        }
 
        String caId = entity.getCaId();
        if (caId != null) {
            stmt.bindString(16, caId);
        }
 
        String classNo = entity.getClassNo();
        if (classNo != null) {
            stmt.bindString(17, classNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(18, name);
        }
 
        String studentNo = entity.getStudentNo();
        if (studentNo != null) {
            stmt.bindString(19, studentNo);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(20, status);
        }
 
        String instituteNumber = entity.getInstituteNumber();
        if (instituteNumber != null) {
            stmt.bindString(21, instituteNumber);
        }
 
        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(22, comments);
        }
 
        String roles = entity.getRoles();
        if (roles != null) {
            stmt.bindString(23, roles);
        }
 
        String genderCode = entity.getGenderCode();
        if (genderCode != null) {
            stmt.bindString(24, genderCode);
        }
 
        String deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindString(25, deleted);
        }
 
        String cellphone = entity.getCellphone();
        if (cellphone != null) {
            stmt.bindString(26, cellphone);
        }
 
        String identificationNumber = entity.getIdentificationNumber();
        if (identificationNumber != null) {
            stmt.bindString(27, identificationNumber);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(28, pwd);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(29, account);
        }
 
        String guest = entity.getGuest();
        if (guest != null) {
            stmt.bindString(30, guest);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        String college = entity.getCollege();
        if (college != null) {
            stmt.bindString(3, college);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String idNo = entity.getIdNo();
        if (idNo != null) {
            stmt.bindString(5, idNo);
        }
 
        String major = entity.getMajor();
        if (major != null) {
            stmt.bindString(6, major);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(7, department);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(9, area);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(10, qq);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(11, address);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(12, nickName);
        }
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(13, portrait);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(14, unit);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(15, phone);
        }
 
        String caId = entity.getCaId();
        if (caId != null) {
            stmt.bindString(16, caId);
        }
 
        String classNo = entity.getClassNo();
        if (classNo != null) {
            stmt.bindString(17, classNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(18, name);
        }
 
        String studentNo = entity.getStudentNo();
        if (studentNo != null) {
            stmt.bindString(19, studentNo);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(20, status);
        }
 
        String instituteNumber = entity.getInstituteNumber();
        if (instituteNumber != null) {
            stmt.bindString(21, instituteNumber);
        }
 
        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(22, comments);
        }
 
        String roles = entity.getRoles();
        if (roles != null) {
            stmt.bindString(23, roles);
        }
 
        String genderCode = entity.getGenderCode();
        if (genderCode != null) {
            stmt.bindString(24, genderCode);
        }
 
        String deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindString(25, deleted);
        }
 
        String cellphone = entity.getCellphone();
        if (cellphone != null) {
            stmt.bindString(26, cellphone);
        }
 
        String identificationNumber = entity.getIdentificationNumber();
        if (identificationNumber != null) {
            stmt.bindString(27, identificationNumber);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(28, pwd);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(29, account);
        }
 
        String guest = entity.getGuest();
        if (guest != null) {
            stmt.bindString(30, guest);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // college
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // city
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // idNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // major
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // department
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // area
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // qq
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // address
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // nickName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // portrait
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // unit
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // phone
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // caId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // classNo
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // name
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // studentNo
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // status
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // instituteNumber
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // comments
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // roles
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // genderCode
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // deleted
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // cellphone
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // identificationNumber
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // pwd
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // account
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29) // guest
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setToken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCollege(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMajor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDepartment(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setArea(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setQq(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNickName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPortrait(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUnit(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPhone(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCaId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setClassNo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setStudentNo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setStatus(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setInstituteNumber(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setComments(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRoles(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setGenderCode(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDeleted(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setCellphone(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setIdentificationNumber(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setPwd(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setAccount(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setGuest(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(User entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(User entity) {
        return null;
    }

    @Override
    public boolean hasKey(User entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
