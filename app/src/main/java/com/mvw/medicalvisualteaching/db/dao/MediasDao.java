package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.Medias;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Medias".
*/
public class MediasDao extends AbstractDao<Medias, Void> {

    public static final String TABLENAME = "Medias";

    /**
     * Properties of entity Medias.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "id");
        public final static Property Original = new Property(1, String.class, "original", false, "original");
        public final static Property MediaType = new Property(2, String.class, "mediaType", false, "mediaType");
        public final static Property Abbreviation = new Property(3, String.class, "abbreviation", false, "abbreviation");
        public final static Property Title = new Property(4, String.class, "title", false, "title");
        public final static Property MediaBlock_id = new Property(5, String.class, "mediaBlock_id", false, "mediaBlock_id");
        public final static Property Dtype = new Property(6, String.class, "dtype", false, "DTYPE");
    }


    public MediasDao(DaoConfig config) {
        super(config);
    }
    
    public MediasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Medias entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String original = entity.getOriginal();
        if (original != null) {
            stmt.bindString(2, original);
        }
 
        String mediaType = entity.getMediaType();
        if (mediaType != null) {
            stmt.bindString(3, mediaType);
        }
 
        String abbreviation = entity.getAbbreviation();
        if (abbreviation != null) {
            stmt.bindString(4, abbreviation);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String mediaBlock_id = entity.getMediaBlock_id();
        if (mediaBlock_id != null) {
            stmt.bindString(6, mediaBlock_id);
        }
 
        String dtype = entity.getDtype();
        if (dtype != null) {
            stmt.bindString(7, dtype);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Medias entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String original = entity.getOriginal();
        if (original != null) {
            stmt.bindString(2, original);
        }
 
        String mediaType = entity.getMediaType();
        if (mediaType != null) {
            stmt.bindString(3, mediaType);
        }
 
        String abbreviation = entity.getAbbreviation();
        if (abbreviation != null) {
            stmt.bindString(4, abbreviation);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String mediaBlock_id = entity.getMediaBlock_id();
        if (mediaBlock_id != null) {
            stmt.bindString(6, mediaBlock_id);
        }
 
        String dtype = entity.getDtype();
        if (dtype != null) {
            stmt.bindString(7, dtype);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Medias readEntity(Cursor cursor, int offset) {
        Medias entity = new Medias( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // original
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mediaType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // abbreviation
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mediaBlock_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // dtype
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Medias entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOriginal(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMediaType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAbbreviation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMediaBlock_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDtype(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Medias entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Medias entity) {
        return null;
    }

    @Override
    public boolean hasKey(Medias entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
