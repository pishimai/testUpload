package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.Section;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Section".
*/
public class SectionDao extends AbstractDao<Section, Void> {

    public static final String TABLENAME = "Section";

    /**
     * Properties of entity Section.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "id");
        public final static Property SectionId = new Property(1, String.class, "sectionId", false, "sectionId");
        public final static Property Name = new Property(2, String.class, "name", false, "name");
        public final static Property Order = new Property(3, String.class, "order", false, "f_order");
        public final static Property Template = new Property(4, String.class, "template", false, "template");
        public final static Property TopImage = new Property(5, String.class, "topImage", false, "topImage");
        public final static Property ChapterId = new Property(6, String.class, "chapterId", false, "chapter_id");
        public final static Property Extend = new Property(7, String.class, "extend", false, "EXTEND");
        public final static Property Dtype = new Property(8, String.class, "dtype", false, "DTYPE");
    }


    public SectionDao(DaoConfig config) {
        super(config);
    }
    
    public SectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Section entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String sectionId = entity.getSectionId();
        if (sectionId != null) {
            stmt.bindString(2, sectionId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String order = entity.getOrder();
        if (order != null) {
            stmt.bindString(4, order);
        }
 
        String template = entity.getTemplate();
        if (template != null) {
            stmt.bindString(5, template);
        }
 
        String topImage = entity.getTopImage();
        if (topImage != null) {
            stmt.bindString(6, topImage);
        }
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(7, chapterId);
        }
 
        String extend = entity.getExtend();
        if (extend != null) {
            stmt.bindString(8, extend);
        }
 
        String dtype = entity.getDtype();
        if (dtype != null) {
            stmt.bindString(9, dtype);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Section entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String sectionId = entity.getSectionId();
        if (sectionId != null) {
            stmt.bindString(2, sectionId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String order = entity.getOrder();
        if (order != null) {
            stmt.bindString(4, order);
        }
 
        String template = entity.getTemplate();
        if (template != null) {
            stmt.bindString(5, template);
        }
 
        String topImage = entity.getTopImage();
        if (topImage != null) {
            stmt.bindString(6, topImage);
        }
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(7, chapterId);
        }
 
        String extend = entity.getExtend();
        if (extend != null) {
            stmt.bindString(8, extend);
        }
 
        String dtype = entity.getDtype();
        if (dtype != null) {
            stmt.bindString(9, dtype);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Section readEntity(Cursor cursor, int offset) {
        Section entity = new Section( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sectionId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // order
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // template
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // topImage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // chapterId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // extend
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // dtype
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Section entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSectionId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrder(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTemplate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTopImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChapterId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExtend(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDtype(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Section entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Section entity) {
        return null;
    }

    @Override
    public boolean hasKey(Section entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
