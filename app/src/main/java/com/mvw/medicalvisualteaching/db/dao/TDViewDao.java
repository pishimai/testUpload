package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.TDView;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TDView".
*/
public class TDViewDao extends AbstractDao<TDView, Void> {

    public static final String TABLENAME = "TDView";

    /**
     * Properties of entity TDView.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "id");
        public final static Property ColSpan = new Property(1, String.class, "colSpan", false, "colSpan");
        public final static Property RowSpan = new Property(2, String.class, "rowSpan", false, "rowSpan");
        public final static Property TdCss = new Property(3, String.class, "tdCss", false, "tdCss");
        public final static Property Text = new Property(4, String.class, "text", false, "text");
        public final static Property Type = new Property(5, String.class, "type", false, "type");
        public final static Property TrView_id = new Property(6, String.class, "trView_id", false, "trView_id");
    }


    public TDViewDao(DaoConfig config) {
        super(config);
    }
    
    public TDViewDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TDView entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String colSpan = entity.getColSpan();
        if (colSpan != null) {
            stmt.bindString(2, colSpan);
        }
 
        String rowSpan = entity.getRowSpan();
        if (rowSpan != null) {
            stmt.bindString(3, rowSpan);
        }
 
        String tdCss = entity.getTdCss();
        if (tdCss != null) {
            stmt.bindString(4, tdCss);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(5, text);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String trView_id = entity.getTrView_id();
        if (trView_id != null) {
            stmt.bindString(7, trView_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TDView entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String colSpan = entity.getColSpan();
        if (colSpan != null) {
            stmt.bindString(2, colSpan);
        }
 
        String rowSpan = entity.getRowSpan();
        if (rowSpan != null) {
            stmt.bindString(3, rowSpan);
        }
 
        String tdCss = entity.getTdCss();
        if (tdCss != null) {
            stmt.bindString(4, tdCss);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(5, text);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String trView_id = entity.getTrView_id();
        if (trView_id != null) {
            stmt.bindString(7, trView_id);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TDView readEntity(Cursor cursor, int offset) {
        TDView entity = new TDView( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // colSpan
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rowSpan
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tdCss
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // text
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // trView_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TDView entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setColSpan(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRowSpan(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTdCss(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setText(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTrView_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TDView entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TDView entity) {
        return null;
    }

    @Override
    public boolean hasKey(TDView entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
