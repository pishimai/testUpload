package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.UserBook;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UserBook".
*/
public class UserBookDao extends AbstractDao<UserBook, String> {

    public static final String TABLENAME = "UserBook";

    /**
     * Properties of entity UserBook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "id");
        public final static Property UId = new Property(1, String.class, "uId", false, "uId");
        public final static Property BIsbn = new Property(2, String.class, "bIsbn", false, "bIsbn");
        public final static Property State = new Property(3, String.class, "state", false, "state");
        public final static Property BuyStatus = new Property(4, String.class, "buyStatus", false, "buyStatus");
        public final static Property Type = new Property(5, String.class, "type", false, "type");
        public final static Property Day = new Property(6, String.class, "day", false, "day");
        public final static Property BookDeadline = new Property(7, String.class, "bookDeadline", false, "bookDeadline");
        public final static Property IsExpired = new Property(8, String.class, "isExpired", false, "isExpired");
        public final static Property Order = new Property(9, int.class, "order", false, "order");
        public final static Property SectionId = new Property(10, String.class, "sectionId", false, "sectionId");
        public final static Property PatchVersion = new Property(11, String.class, "patchVersion", false, "patchVersion");
        public final static Property NonWifi = new Property(12, String.class, "nonWifi", false, "nonWifi");
    }


    public UserBookDao(DaoConfig config) {
        super(config);
    }
    
    public UserBookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UserBook\" (" + //
                "\"id\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"uId\" TEXT," + // 1: uId
                "\"bIsbn\" TEXT," + // 2: bIsbn
                "\"state\" TEXT," + // 3: state
                "\"buyStatus\" TEXT," + // 4: buyStatus
                "\"type\" TEXT," + // 5: type
                "\"day\" TEXT," + // 6: day
                "\"bookDeadline\" TEXT," + // 7: bookDeadline
                "\"isExpired\" TEXT," + // 8: isExpired
                "\"order\" INTEGER NOT NULL ," + // 9: order
                "\"sectionId\" TEXT," + // 10: sectionId
                "\"patchVersion\" TEXT," + // 11: patchVersion
                "\"nonWifi\" TEXT);"); // 12: nonWifi
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_UserBook_id ON UserBook" +
                " (\"id\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UserBook\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBook entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String uId = entity.getUId();
        if (uId != null) {
            stmt.bindString(2, uId);
        }
 
        String bIsbn = entity.getBIsbn();
        if (bIsbn != null) {
            stmt.bindString(3, bIsbn);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(4, state);
        }
 
        String buyStatus = entity.getBuyStatus();
        if (buyStatus != null) {
            stmt.bindString(5, buyStatus);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(7, day);
        }
 
        String bookDeadline = entity.getBookDeadline();
        if (bookDeadline != null) {
            stmt.bindString(8, bookDeadline);
        }
 
        String isExpired = entity.getIsExpired();
        if (isExpired != null) {
            stmt.bindString(9, isExpired);
        }
        stmt.bindLong(10, entity.getOrder());
 
        String sectionId = entity.getSectionId();
        if (sectionId != null) {
            stmt.bindString(11, sectionId);
        }
 
        String patchVersion = entity.getPatchVersion();
        if (patchVersion != null) {
            stmt.bindString(12, patchVersion);
        }
 
        String nonWifi = entity.getNonWifi();
        if (nonWifi != null) {
            stmt.bindString(13, nonWifi);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBook entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String uId = entity.getUId();
        if (uId != null) {
            stmt.bindString(2, uId);
        }
 
        String bIsbn = entity.getBIsbn();
        if (bIsbn != null) {
            stmt.bindString(3, bIsbn);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(4, state);
        }
 
        String buyStatus = entity.getBuyStatus();
        if (buyStatus != null) {
            stmt.bindString(5, buyStatus);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(7, day);
        }
 
        String bookDeadline = entity.getBookDeadline();
        if (bookDeadline != null) {
            stmt.bindString(8, bookDeadline);
        }
 
        String isExpired = entity.getIsExpired();
        if (isExpired != null) {
            stmt.bindString(9, isExpired);
        }
        stmt.bindLong(10, entity.getOrder());
 
        String sectionId = entity.getSectionId();
        if (sectionId != null) {
            stmt.bindString(11, sectionId);
        }
 
        String patchVersion = entity.getPatchVersion();
        if (patchVersion != null) {
            stmt.bindString(12, patchVersion);
        }
 
        String nonWifi = entity.getNonWifi();
        if (nonWifi != null) {
            stmt.bindString(13, nonWifi);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserBook readEntity(Cursor cursor, int offset) {
        UserBook entity = new UserBook( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bIsbn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // state
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // buyStatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // day
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bookDeadline
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isExpired
            cursor.getInt(offset + 9), // order
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sectionId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // patchVersion
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // nonWifi
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBook entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBIsbn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setState(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBuyStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDay(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBookDeadline(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsExpired(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOrder(cursor.getInt(offset + 9));
        entity.setSectionId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPatchVersion(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNonWifi(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserBook entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(UserBook entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBook entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
