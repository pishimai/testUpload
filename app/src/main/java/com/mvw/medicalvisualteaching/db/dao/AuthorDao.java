package com.mvw.medicalvisualteaching.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mvw.medicalvisualteaching.bean.offlinebook.Author;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Author".
*/
public class AuthorDao extends AbstractDao<Author, Void> {

    public static final String TABLENAME = "Author";

    /**
     * Properties of entity Author.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "id");
        public final static Property Photo = new Property(1, String.class, "photo", false, "photo");
        public final static Property Name = new Property(2, String.class, "name", false, "name");
        public final static Property Gender = new Property(3, String.class, "gender", false, "gender");
        public final static Property IsExtend = new Property(4, String.class, "isExtend", false, "isExtend");
    }


    public AuthorDao(DaoConfig config) {
        super(config);
    }
    
    public AuthorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Author entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(2, photo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(4, gender);
        }
 
        String isExtend = entity.getIsExtend();
        if (isExtend != null) {
            stmt.bindString(5, isExtend);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Author entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(2, photo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(4, gender);
        }
 
        String isExtend = entity.getIsExtend();
        if (isExtend != null) {
            stmt.bindString(5, isExtend);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Author readEntity(Cursor cursor, int offset) {
        Author entity = new Author( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // photo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gender
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // isExtend
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Author entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPhoto(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGender(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsExtend(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Author entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Author entity) {
        return null;
    }

    @Override
    public boolean hasKey(Author entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
